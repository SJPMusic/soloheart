#!/usr/bin/env python3
"""
Debug Character Creator Flow - Diagnostic Test Script

This script audits the current character creation flow to identify why natural language 
input is no longer being processed correctly during character creation.

GOAL: Identify why natural language input is no longer being processed correctly during character creation. Ensure:
- The model receives the correct prompt for `create_character` mode.
- Narrative Goal (`create_character`) is set and maintained.
- Facts from user input are extracted and stored via memory.write().
- Responses are generated by Gemma (not fallback logic).
"""

import sys
import os
import json
import logging
from datetime import datetime

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_narrative_bridge_integration():
    """Test the narrative bridge integration with character creation."""
    print("\n" + "="*80)
    print("🧪 TESTING NARRATIVE BRIDGE INTEGRATION")
    print("="*80)
    
    try:
        from game_app.narrative_bridge import NarrativeBridge
        
        # Setup: Initialize NarrativeBridge with test campaign
        campaign_id = "test_campaign_cc"
        bridge = NarrativeBridge(campaign_id)
        
        print(f"✅ NarrativeBridge initialized for campaign: {campaign_id}")
        
        # Test TNE client connection
        connection_result = bridge.tne_client.test_connection()
        print(f"🔌 TNE Connection Status: {connection_result}")
        
        return bridge
        
    except ImportError as e:
        print(f"❌ Failed to import NarrativeBridge: {e}")
        return None
    except Exception as e:
        print(f"❌ Failed to initialize NarrativeBridge: {e}")
        return None

def test_character_creation_flow(bridge):
    """Test the character creation flow with natural language input."""
    print("\n" + "="*80)
    print("🧪 TESTING CHARACTER CREATION FLOW")
    print("="*80)
    
    if not bridge:
        print("❌ Cannot test character creation flow - bridge not available")
        return False
    
    # Inject test player input
    test_input = "My name is Elira. I'm an elven druid who survived a forest fire."
    print(f"📝 Test Input: '{test_input}'")
    
    try:
        # Test the process_player_input method
        print("\n🔄 Processing player input through NarrativeBridge...")
        response = bridge.process_player_input(test_input, bridge.campaign_id)
        
        print(f"📣 Response: {response}")
        
        # Check if we got a meaningful response
        if response and len(response.strip()) > 10:
            print("✅ Received meaningful response from NarrativeBridge")
        else:
            print("⚠️ Response seems too short or empty")
            
        return True
        
    except Exception as e:
        print(f"❌ Error processing player input: {e}")
        return False

def test_tne_client_direct():
    """Test direct TNE client communication."""
    print("\n" + "="*80)
    print("🧪 TESTING DIRECT TNE CLIENT")
    print("="*80)
    
    try:
        from integrations.tne_client import TNEClient
        
        # Initialize TNE client
        campaign_id = "test_campaign_cc"
        tne_client = TNEClient(base_url="http://localhost:5002", campaign_id=campaign_id)
        
        print(f"✅ TNEClient initialized for campaign: {campaign_id}")
        
        # Test connection
        connection_result = tne_client.test_connection()
        print(f"🔌 Connection Result: {json.dumps(connection_result, indent=2)}")
        
        # Test adding a memory entry
        test_memory = {
            "text": "My name is Elira. I'm an elven druid who survived a forest fire.",
            "memory_type": "character_creation",
            "metadata": {
                "character_name": "Elira",
                "race": "Elf",
                "class": "Druid",
                "background": "Survived forest fire"
            }
        }
        
        print(f"\n📝 Adding test memory entry...")
        memory_result = tne_client.add_memory_entry(test_memory)
        print(f"📝 Memory Result: {json.dumps(memory_result, indent=2)}")
        
        return tne_client
        
    except ImportError as e:
        print(f"❌ Failed to import TNEClient: {e}")
        return None
    except Exception as e:
        print(f"❌ Failed to test TNE client: {e}")
        return None

def test_character_generator():
    """Test the character generator directly."""
    print("\n" + "="*80)
    print("🧪 TESTING CHARACTER GENERATOR")
    print("="*80)
    
    try:
        from game_app.character_generator import CharacterGenerator
        
        # Initialize character generator
        generator = CharacterGenerator()
        
        print("✅ CharacterGenerator initialized")
        
        # Test with natural language input
        test_input = "My name is Elira. I'm an elven druid who survived a forest fire."
        
        print(f"\n📝 Testing with input: '{test_input}'")
        
        # Start character creation
        start_result = generator.start_conversation(test_input)
        print(f"🚀 Start Result: {json.dumps(start_result, indent=2)}")
        
        # Continue with more input
        continue_input = "I want to be a nature-loving healer with a connection to animals."
        continue_result = generator.continue_conversation(continue_input)
        print(f"🔄 Continue Result: {json.dumps(continue_result, indent=2)}")
        
        return generator
        
    except ImportError as e:
        print(f"❌ Failed to import CharacterGenerator: {e}")
        return None
    except Exception as e:
        print(f"❌ Failed to test character generator: {e}")
        return None

def test_api_endpoints():
    """Test the API endpoints directly."""
    print("\n" + "="*80)
    print("🧪 TESTING API ENDPOINTS")
    print("="*80)
    
    import requests
    
    base_url = "http://localhost:5002"
    
    # Test health endpoint
    print(f"\n🏥 Testing health endpoint: {base_url}/health")
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        print(f"Health Response: {response.status_code} - {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"❌ Health endpoint failed: {e}")
        return False
    
    # Test character creation start
    print(f"\n🚀 Testing character creation start: {base_url}/api/character/vibe-code/start")
    try:
        data = {"description": "My name is Elira. I'm an elven druid who survived a forest fire."}
        response = requests.post(f"{base_url}/api/character/vibe-code/start", json=data, timeout=10)
        print(f"Start Response: {response.status_code}")
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"Response Body: {json.dumps(response_data, indent=2)}")
            
            # Check for extracted facts
            extracted_facts = response_data.get('extracted_facts', {})
            if extracted_facts:
                print(f"✅ Extracted Facts: {json.dumps(extracted_facts, indent=2)}")
            else:
                print("⚠️ No extracted facts found")
        else:
            print(f"❌ Start endpoint returned status {response.status_code}")
            print(f"Response: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"❌ Character creation start failed: {e}")
        return False
    
    # Test character creation continue
    print(f"\n🔄 Testing character creation continue: {base_url}/api/character/vibe-code/continue")
    try:
        data = {"user_input": "I want to be a nature-loving druid with healing abilities."}
        response = requests.post(f"{base_url}/api/character/vibe-code/continue", json=data, timeout=10)
        print(f"Continue Response: {response.status_code}")
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"Response Body: {json.dumps(response_data, indent=2)}")
            
            # Check for extracted facts
            extracted_facts = response_data.get('extracted_facts', {})
            if extracted_facts:
                print(f"✅ Extracted Facts: {json.dumps(extracted_facts, indent=2)}")
            else:
                print("⚠️ No extracted facts found")
        else:
            print(f"❌ Continue endpoint returned status {response.status_code}")
            print(f"Response: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"❌ Character creation continue failed: {e}")
        return False
    
    return True

def test_llm_integration():
    """Test LLM integration and prompt construction."""
    print("\n" + "="*80)
    print("🧪 TESTING LLM INTEGRATION")
    print("="*80)
    
    # Test LLM service
    print("\n🔧 Testing Gemma3 Service")
    print("-" * 40)
    
    try:
        from game_app.gemma3_llm_service import Gemma3LLMService
        llm_service = Gemma3LLMService()
        print("✅ Gemma3 LLM service initialized")
    except Exception as e:
        print(f"❌ Failed to initialize Gemma3 LLM service: {e}")
        return

    try:
        # Test prompt construction for character creation
        system_prompt = """You are a D&D 5E character creation assistant. Extract character information from user input and respond naturally."""
        
        user_input = "My name is Elira. I'm an elven druid who survived a forest fire."
        
        print(f"\n📝 Testing prompt construction...")
        print(f"System Prompt: {system_prompt}")
        print(f"User Input: {user_input}")
        
        # Test the LLM service
        try:
            response = llm_service.generate_text(user_input, system_prompt)
            print(f"🤖 Gemma3 Response: {response}")
            
            if response and len(response.strip()) > 10:
                print("✅ Gemma3 service working correctly")
            else:
                print("⚠️ Gemma3 response seems too short")
                
        except Exception as e:
            print(f"❌ Gemma3 service error: {e}")
            
        return llm_service
        
    except ImportError as e:
        print(f"❌ Failed to import OllamaLLMService: {e}")
        return None
    except Exception as e:
        print(f"❌ Failed to test LLM integration: {e}")
        return None

def main():
    """Main diagnostic function."""
    print("🚀 CHARACTER CREATION FLOW DIAGNOSTIC")
    print("="*80)
    print(f"🕐 Started at: {datetime.now().isoformat()}")
    
    # Test 1: Narrative Bridge Integration
    bridge = test_narrative_bridge_integration()
    
    # Test 2: Character Creation Flow
    if bridge:
        test_character_creation_flow(bridge)
    
    # Test 3: Direct TNE Client
    tne_client = test_tne_client_direct()
    
    # Test 4: Character Generator
    generator = test_character_generator()
    
    # Test 5: API Endpoints
    test_api_endpoints()
    
    # Test 6: LLM Integration
    llm_service = test_llm_integration()
    
    print("\n" + "="*80)
    print("📊 DIAGNOSTIC SUMMARY")
    print("="*80)
    
    # Summary of findings
    print("✅ Tests completed. Check the output above for any issues.")
    print("\n🔍 Key things to look for:")
    print("- TNE API server connectivity")
    print("- Character creation flow responses")
    print("- Extracted facts from user input")
    print("- LLM service functionality")
    print("- API endpoint responses")
    
    print(f"\n🕐 Completed at: {datetime.now().isoformat()}")

if __name__ == "__main__":
    main() 